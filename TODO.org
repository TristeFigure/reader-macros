* TODO [[http://briancarper.net/blog/449/][Example]] from Brian Carper
  https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L82

  #+BEGIN_SRC clojure :tangle macros.clj :shebang #!/usr/bin/env clj
    (use 'add-classpath.core)
    (add-classpath "lib/*")
    (add-classpath "lib/dev/*")
    (use 'debug.core)
    (use 'clojure.test)
    
    (defn dispatch-reader-macro [ch fun]
      (let [dm (.get (doto (.getDeclaredField clojure.lang.LispReader "dispatchMacros")
                       (.setAccessible true))
                     nil)]
        (aset dm (int ch) fun)))
    
    (defn reader-macro [ch fun]
      (let [dm (.get (doto (.getDeclaredField clojure.lang.LispReader "macros")
                       (.setAccessible true))
                     nil)]
        (aset dm (int ch) fun)))
    
    (defn uppercase-string [rdr letter-u]
      (let [c (.read rdr)]
        (if (= c (int \"))
          (.toUpperCase (.invoke
                         (clojure.lang.LispReader$StringReader.)
                         rdr
                         c))
          (throw (Exception. (str "Reader barfed on " (char c)))))))
    
    (dispatch-reader-macro \U uppercase-string)
    (reader-macro \U uppercase-string)
    
    (is (= #U"Foo bar BAZ" "FOO BAR BAZ")
        (= U"Foo bar BAZ" "FOO BAR BAZ"))    
  #+END_SRC
* TODO API
  According to [[http://www.bookshelf.jp/texi/onlisp/onlisp_18.html][this]], we have =set-macro-character=,
  =set-dispatch-macro-character=, etc.:

  - [[http://www.lispworks.com/documentation/HyperSpec/Body/f_set_ma.htm#set-macro-character][(set-macro-character char new-function)]]
  - [[http://www.lispworks.com/documentation/HyperSpec/Body/f_set_ma.htm#get-macro-character][(get-macro-character char)]]
  - [[http://www.lispworks.com/documentation/HyperSpec/Body/f_set__1.htm#set-dispatch-macro-character][(set-dispatch-macro-character disp-char sub-char new-function)]]
  - [[http://www.lispworks.com/documentation/HyperSpec/Body/f_set__1.htm#get-dispatch-macro-character][(get-dispatch-macro-character char)]]
  - [[http://www.lispworks.com/documentation/HyperSpec/Body/f_mk_dis.htm#make-dispatch-macro-character][(make-dispatch-macro-character char)]]
  - [[http://www.lispworks.com/documentation/HyperSpec/Body/f_rd_del.htm#read-delimited-list][(read-delimited-list char &optional input-stream recursive-p)]]

  where =new-function= has the signatures =(lambda (stream char)
  . . .)= and =(lambda (stream disp-char sub-char))=,
  respectively. (So, roughly on analogy with Clojure's read-table.)

  =set-macro-character= also has a notion of =non-terminating?=;
  =read-delimited-list= help find the end of a list with funny
  characters.

  (Hey, what do you know? Hickey implemented [[https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L1098][readDelimitedList]]; it
  requires a =java.io.PushbackReader=, though.)

  Like [[https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L100][this]], maybe =make-dispatch-macro-character= has the effect:

  #+BEGIN_SRC java
    macros['#'] = new DispatchReader();
  #+END_SRC

  Do we want to allow an optional read-table? Hmm; what's the point?
  It's [[https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L58][static]] in =LispReader=.

  E.g. [[https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L445][StringReader]] has the signature:

  #+BEGIN_SRC java
    public static class StringReader extends AFn{
        public Object invoke(Object reader, Object doublequote) {
            StringBuilder sb = new StringBuilder();
            Reader r = (Reader) reader;
            // . . .
            return stringBuilder.toString();
        }
    }
  #+END_SRC
* TODO Convenience readers
  See e.g. [[https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L84][string-reader]]:

  #+BEGIN_SRC clojure
    ;;; This doesn't work (we need an instance to get the method).
    (def string-reader LispReader$StringReader/invoke)
    
    ;;; This does, but it's ugly; and it's difficult to invoke.
    (get (:declaredMethods (bean LispReader$StringReader)) 0)
    
    ;;; Maybe this?
    (let [string-reader (new LispReader$StringReader)]
      (defn (read-string reader char)
        (.invoke string-reader reader char)))
    
  #+END_SRC
* TODO Implementation
  #+BEGIN_SRC clojure :tangle reader-macros.clj :shebang #!/usr/bin/env clj
    (use 'add-classpath.core)
    (add-classpath "lib/*" "lib/dev/*") 
    (use 'cadr.core)
    (use 'debug.core)
    (use 'clojure.test)
    (use 'lambda.core)
    
    (import '(clojure.lang LispReader
                           LispReader$ArgReader
                           LispReader$CharacterReader
                           LispReader$CommentReader
                           LispReader$CtorReader
                           LispReader$DiscardReader
                           LispReader$DispatchReader
                           LispReader$EvalReader
                           LispReader$FnReader
                           LispReader$ListReader
                           LispReader$MapReader
                           LispReader$MetaReader
                           LispReader$RegexReader
                           LispReader$SetReader
                           LispReader$StringReader
                           LispReader$SyntaxQuoteReader
                           LispReader$UnmatchedDelimiterReader
                           LispReader$UnquoteReader
                           LispReader$UnreadableReader
                           LispReader$VectorReader
                           LispReader$WrappingReader
                           LispReader$VarReader))
    
    (let [macros (.getDeclaredField LispReader "macros")]
      (.setAccessible macros true)
      (let [macros (.get macros nil)]
        (def set-macro-character
          (λ [character read]
            (aset macros (int character) read)))
    
        (def get-macro-character
          (λ [character]
            (aget macros (int character))))))
    
    (let [dispatch-macros (.getDeclaredField LispReader "dispatchMacros")]
      (.setAccessible dispatch-macros true)
      (let [dispatch-macros (.get dispatch-macros nil)]
        (def set-dispatch-macro-character
          (λ [character read]
            (aset dispatch-macros (int character) read)))
    
        (def get-dispatch-macro-character
          (λ [character]
            (aget dispatch-macros (int character))))))
    
    (def read-delimited-list
      (λ [delimiter reader recursive?]
        (LispReader/readDelimitedList delimiter reader recursive?)))
    
    (def nullary-constructor
      (λ [class]
        (loop [constructors (into '() (:declaredConstructors (bean class)))]
          (if (empty? constructors)
            false
            (let [constructor (car constructors)]
              (if (zero? (count (:parameterTypes (bean constructor))))
                constructor
                (recur (cdr constructors))))))))
    
    (let [constructor (nullary-constructor LispReader$ArgReader)]
      (.setAccessible constructor true)
      (let [macro-arg-reader (memfn constructor)]
        (def macro-read-arg
          (λ [reader character]
            (.invoke macro-arg-reader reader character)))))
    
    (let [macro-character-reader (LispReader$CharacterReader.)]
      (def macro-read-character
        (λ [reader character]
          (.invoke macro-character-reader reader character))))
    
    (let [macro-comment-reader (LispReader$CommentReader.)]
      (def macro-read-comment
        (λ [reader character]
          (.invoke macro-comment-reader reader character))))
    
    (let [macro-deref-reader (LispReader$WrappingReader. 'deref)]
      (def macro-read-deref
        (λ [reader character]
          (.invoke macro-deref-reader reader character))))
    
    (let [macro-discard-reader (LispReader$DiscardReader.)]
      (def macro-read-discard
        (λ [reader character]
          (.invoke macro-discard-reader reader character))))
    
    (let [macro-eval-reader (LispReader$EvalReader.)]
      (def macro-read-eval
        (λ [reader character]
          (.invoke macro-eval-reader reader character))))
    
    (let [macro-fn-reader (LispReader$FnReader.)]
      (def macro-read-fn
        (λ [reader character]
          (.invoke macro-fn-reader reader character))))
    
    (let [macro-list-reader (LispReader$ListReader.)]
      (def macro-read-list
        (λ [reader character]
          (.invoke macro-list-reader reader character))))
    
    (let [macro-map-reader (LispReader$MapReader.)]
      (def macro-read-map
        (λ [reader character]
          (.invoke macro-map-reader reader character))))
    
    (let [macro-meta-reader (LispReader$MetaReader.)]
      (def macro-read-meta
        (λ [reader character]
          (.invoke macro-meta-reader reader character))))
    
    (let [macro-quote-reader (LispReader$WrappingReader. 'quote)]
      (def macro-read-quote
        (λ [reader character]
          (.invoke macro-quote-reader reader character))))
    
    (let [macro-regex-reader (LispReader$RegexReader.)]
      (def macro-read-regex
        (λ [reader character]
          (.invoke macro-regex-reader reader character))))
    
    (let [macro-set-reader (LispReader$SetReader.)]
      (def macro-read-set
        (λ [reader character]
          (.invoke macro-set-reader reader character))))
    
    (let [macro-string-reader (LispReader$StringReader.)]
      (def macro-read-string
        (λ [reader character]
          (.invoke macro-string-reader reader character))))
    
    (let [macro-syntax-quote-reader (LispReader$SyntaxQuoteReader.)]
      (def macro-read-syntax-quote
        (λ [reader character]
          (.invoke macro-syntax-quote-reader reader character))))
    
    (let [macro-unmatched-delimiter-reader (LispReader$UnmatchedDelimiterReader.)]
      (def macro-read-unmatched-delimiter
        (λ [reader character]
          (.invoke macro-unmatched-delimiter-reader reader character))))
    
    (let [constructor (nullary-constructor LispReader$UnquoteReader)]
      (.setAccessible constructor true)
      (let [macro-unquote-reader (memfn constructor)]
        (def macro-unquote-arg
          (λ [reader character]
            (.invoke macro-unquote-reader reader character)))))
    
    (let [macro-unreadable-reader (LispReader$UnreadableReader.)]
      (def macro-read-unreadable
        (λ [reader character]
          (.invoke macro-unreadable-reader reader character))))
    
    (let [macro-vector-reader (LispReader$VectorReader.)]
      (def macro-read-vector
        (λ [reader character]
          (.invoke macro-vector-reader reader character))))
    
    (let [macro-var-reader (LispReader$VarReader.)]
      (def macro-read-var
        (λ [reader character]
          (.invoke macro-var-reader reader character))))
    
    (let [macro-ctor-reader (LispReader$CtorReader.)]
      (def macro-read-ctor
        (λ [reader character]
          (.invoke macro-ctor-reader reader character))))
    
    (set-macro-character \" macro-read-string)
    (debug "harro")
  #+END_SRC
* TODO Define readers programmatically.
  If we do this, funny enough, we don't actually have a guaranteed
  API; that's bad, isn't it?

  #+BEGIN_SRC clojure :tangle readers.clj :shebang #!/usr/bin/env clj
    (use 'add-classpath.core)
    (add-classpath "lib/*" "lib/dev/*")
    
    (use 'debug.core)
    (use 'lambda.core)
    (use 'clojure.string)
    (use 'useful.seq)
    (use 'cadr.core)
    
    (import 'clojure.lang.LispReader)
    (import 'java.util.regex.Pattern)
    
    ;;; re-seq exists.
    (def tokenize
      (λ [string regex]
        (let [matcher (re-matcher regex string)]
          (loop [tokens '()]
            (if (.find matcher)
              (recur (cons (re-groups matcher) tokens))
              tokens)))))
    
    (def class->predicates
      (λ [class]
        (map lower-case (drop-last (re-seq #"[A-Z][a-z]+" class)))))
    
    (def class->read-class
      (λ [class]
        (symbol (format "macro-read-%s" (join "-" (class->predicates class))))))
    
    (def nullary-constructor
      (λ [class]
        (loop [constructors (into '() (:declaredConstructors (bean class)))]
          (if (empty? constructors)
            false
            (let [constructor (car constructors)]
              (if (zero? (count (:parameterTypes (bean constructor))))
                constructor
                (recur (cdr constructors))))))))
    
    (def nullary-constructor? #(and (nullary-constructor %) true))
    
    (def nullary-readers
      (map (λ [class]
             {:class (symbol (.getName class))
              :constructor (nullary-constructor? class)
              :read-class (class->read-class (.getSimpleName class))})
           (filter (λ [class]
                     (and (re-find #"Reader$" (.getSimpleName class))
                          (nullary-constructor class)))
                   (into '() (:declaredClasses (bean LispReader))))))
    
    (defmacro def-read-macros []
      `(do ~@(map (λ [{class :class
                       constructor :constructor
                       read-class :read-class}]
                    `(let [constructor# (nullary-constructor ~class)]
                       (.setAccessible constructor# true)
                       (let [class-reader# (memfn constructor#)]
                         (def ~read-class
                           (λ [character# reader#]
                             (.invoke class-reader# reader# character#))))))
                  nullary-readers)))
    
    (def-read-macros)
    
    (debug
     #_(map class->reader
          (filter #(re-find #"Reader$" %)
                  (map #(.getSimpleName %)
                       (into '()
                             (:declaredClasses (bean LispReader))))))
     #_(map (λ [class]
              (let [simple-name (.getSimpleName class)]
                {:read-class (class->read-class simple-name)
                 :class-reader (class->class-reader simple-name)
                 :class (symbol (.getName class))}))
            (into '()
                  (:declaredClasses (bean LispReader))))
     #_(macroexpand '(def-read-macros))
     #_(map #(map count (map :parameterTypes(map bean (into '() %))))
          (map :declaredConstructors (map bean (:declaredClasses (bean LispReader)))))
     #_(map #(map bean (into '() %)) (map :declaredConstructors (map bean (:declaredClasses (bean LispReader)))))
     #_(map nullary-constructor (:declaredClasses (bean LispReader)))
     #_readers
     #_(macroexpand '(def-read-macros))
     macro-read-string
     macro-read-var)
    
  #+END_SRC

  From [[https://github.com/richhickey/clojure-contrib/blob/a1c66df5287776b4397cf3929a5f498fbb34ea32/src/main/clojure/clojure/contrib/str_utils2.clj#L222][here]]:

  #+BEGIN_SRC clojure
    (defn partition
      "Splits the string into a lazy sequence of substrings, alternating
      between substrings that match the patthern and the substrings
      between the matches.  The sequence always starts with the substring
      before the first match, or an empty string if the beginning of the
      string matches.
    
      For example: (partition \"abc123def\" #\"[a-z]+\")
      returns: (\"\" \"abc\" \"123\" \"def\")"
      [#^String s #^Pattern re]
      (let [m (re-matcher re s)]
        ((fn step [prevend]
           (lazy-seq
            (if (.find m)
              (cons (.subSequence s prevend (.start m))
                    (cons (re-groups m)
                          (step (+ (.start m) (count (.group m))))))
              (when (< prevend (.length s))
                (list (.subSequence s prevend (.length s)))))))
         0)))
  #+END_SRC
* TODO Fuck it, let's define the readers manually.
  We'll do something clever later, if we need to; we have a guaranteed
  API this way.

  #+BEGIN_SRC clojure :tangle manual-constructors.clj :shebang #!/usr/bin/env clj

  #+END_SRC
